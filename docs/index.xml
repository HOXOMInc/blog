<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>株式会社ホクソエムのブログ</title>
    <link>http://blog.hoxo-m.com/</link>
    <description>Recent content on 株式会社ホクソエムのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>HOXOM, Inc.</copyright>
    <lastBuildDate>Mon, 24 Apr 2017 21:00:00 -2200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>R の強制型変換と NA の取り扱い</title>
      <link>http://blog.hoxo-m.com/hoxom01_vector_type_coerce/</link>
      <pubDate>Mon, 24 Apr 2017 21:00:00 -2200</pubDate>
      
      <guid>http://blog.hoxo-m.com/hoxom01_vector_type_coerce/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;R において欠損値を表す NA は非常に便利です。 NA は普通の R ユーザにとって自然に取り扱うことのできる概念ですが、それを支える内部の仕組みはわりと複雑です。 例えば、NA の型は論理値型ですが、一体それはなぜでしょうか？ 今日は R における強制型変換の話とからめてその謎をひも解いていきます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;ベクトルと型&lt;/h2&gt;
&lt;p&gt;R のベクトルは型を持ちます。&lt;/p&gt;
&lt;p&gt;例えば、1から3までの数値ベクトルを作成してみます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1:3
x
#&amp;gt; [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトルの型を確認するには &lt;code&gt;typeof()&lt;/code&gt; 関数を使います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトル &lt;code&gt;x&lt;/code&gt; の型は整数型(integer)であることがわかります。&lt;/p&gt;
&lt;p&gt;他にも、例えば次のようなベクトルを作成してみます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   &amp;quot;NA&amp;quot;  &amp;quot;DON&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、ベクトル &lt;code&gt;x&lt;/code&gt; は文字列型(character)になります。&lt;/p&gt;
&lt;p&gt;このように、Rのベクトルは必ず型を持ちます。&lt;/p&gt;
&lt;p&gt;では、1つのベクトルの中に異なる型の要素を含めるとどうなるでしょうか。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, 2, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   &amp;quot;2&amp;quot;   &amp;quot;DON&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、ベクトル &lt;code&gt;x&lt;/code&gt; 中に含まれる数値の &lt;code&gt;2&lt;/code&gt; は、文字列型の &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt; に&lt;strong&gt;強制型変換&lt;/strong&gt;されます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;強制型変換&lt;/h2&gt;
&lt;p&gt;R のベクトルは、1つだけしか型を持つことができません。&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;したがって、異なる型の要素を結合してベクトルを作成しようとすると、型を統一するために、型の自動変換が行われます。これが強制型変換です。&lt;/p&gt;
&lt;p&gt;強制型変換にはルールがあります。結合しようとする要素の型の中で、最も柔軟性の高い型に変換されます。&lt;/p&gt;
&lt;p&gt;型の柔軟性は次の通りです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logical &amp;lt; integer &amp;lt; double &amp;lt; complex &amp;lt; character
(論理値型 &amp;lt; 整数型 &amp;lt; 倍精度小数点型 &amp;lt; 複素数型 &amp;lt; 文字列型)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先ほどの例で言うと、&lt;code&gt;&amp;quot;U&amp;quot;&lt;/code&gt; は character、&lt;code&gt;2&lt;/code&gt; は double、&lt;code&gt;&amp;quot;DON&amp;quot;&lt;/code&gt; は character なので、最も柔軟性の高い character 型に変換されたと言うわけです。&lt;/p&gt;
&lt;p&gt;他の例を挙げると、例えば、整数型と論理値型を結合すると、整数型に強制型変換されます。&lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1L, 2L, 3L, TRUE, FALSE)
x
#&amp;gt; [1] 1 2 3 1 0
typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複素数型と倍精度小数点型を結合すると、複素数型に強制型変換されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1 + 1i, 2 + 2i, 3, 4)
x
#&amp;gt; [1] 1+1i 2+2i 3+0i 4+0i
typeof(x)
#&amp;gt; [1] &amp;quot;complex&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おわかりのように、型の柔軟性は、低い方から高い方に自然に変換できるように決められています。&lt;/p&gt;
&lt;p&gt;どんな型でも文字列に変換することができるので、文字列の型が最も柔軟性が高いことがわかります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(TRUE, 1L, 1.0, 1+0i, &amp;quot;hoge&amp;quot;)
x
#&amp;gt; [1] &amp;quot;TRUE&amp;quot; &amp;quot;1&amp;quot;    &amp;quot;1&amp;quot;    &amp;quot;1+0i&amp;quot; &amp;quot;hoge&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;-na-&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;強制型変換における NA の取り扱い&lt;/h2&gt;
&lt;p&gt;R には値が欠測していることを表すために NA という特別な値が用意されています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1, NA, 3)
x
#&amp;gt; [1]  1 NA  3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、この NA の型を調べてみると、logical になっています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(NA)
#&amp;gt; [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;したがって、NA は論理値型であると思われるかもしれませんが、それは違います。&lt;/p&gt;
&lt;p&gt;実は、Rでは、全部の型に対して NA が用意されています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;論理値型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;logical&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;整数型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;integer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_integer_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;倍精度小数点型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_real_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;複素数型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;complex&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_complex_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;文字列型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_character_&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;その理由は強制型変換と深いつながりがあります。&lt;/p&gt;
&lt;p&gt;まず、NA は最も柔軟性の低い論理値型で定義されています。&lt;/p&gt;
&lt;p&gt;すなわち、論理値型のベクトルに NA が含まれている場合、強制型変換は行われません。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(TRUE, NA, FALSE)
x
#&amp;gt; [1]  TRUE    NA FALSE
typeof(x)
#&amp;gt; [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、整数型のベクトルに NA を含めたいとします。 NA は論理値型ですので、整数型に強制型変換しなければなりません。 そこで使用されるのが整数型の NA である NA_integer_ というわけです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1L, NA, 3L)
x
#&amp;gt; [1]  1 NA  3
typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表面上は NA と表示されますが、NA_integer_ に変換されていることは次のようにして確認できます。&lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;identical(x[2], NA)
#&amp;gt; [1] FALSE
identical(x[2], NA_integer_)
#&amp;gt; [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他の型でも同様に、NA は強制型変換のルールに従い、ベクトル中で最も柔軟性の高い型の NA に変換されます。&lt;/p&gt;
&lt;p&gt;例えば、文字列型に含まれる NA は NA_character_ に変換されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, NA, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   NA    &amp;quot;DON&amp;quot;
identical(x[2], NA_character_)
#&amp;gt; [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトの NA が論理値型である理由は、ここにあります。&lt;/p&gt;
&lt;p&gt;NA を柔軟性の最も低い論理値型とすることで、強制型変換のルールがうまく働き、最も自然な形で型変換を行うことができるのです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;デフォルトの NA が論理値型であることで、強制型変換のルールとうまく組み合わさり、自然な動きをすることがわかりました。&lt;/p&gt;
&lt;p&gt;すべての型の NA は、&lt;code&gt;is.na()&lt;/code&gt; を適用すると TRUE となります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sapply(list(NA, NA_integer_, NA_real_, NA_complex_, NA_character_), is.na)
#&amp;gt; [1] TRUE TRUE TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;したがって、ユーザは特に型を意識することなく NA を取り扱うことができます。&lt;/p&gt;
&lt;p&gt;このように、便利な機能の裏側には様々な仕組みが動いています。&lt;/p&gt;
&lt;p&gt;Rのこのような仕組みに興味を持った方は、参考文献に挙げた『R言語徹底解説』を読んでみてください。 Rの世界が広がると思います。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hadley Wickham 著、石田基広、市川太祐、高柳慎一、福島真太朗 訳『R言語徹底解説』共立出版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/432012393X&#34; class=&#34;uri&#34;&gt;https://www.amazon.co.jp/dp/432012393X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;もし、複数の型を持つベクトルが必要ならば、&lt;strong&gt;リスト&lt;/strong&gt; を使うことになります。&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;細かいことですが、R で &lt;code&gt;1&lt;/code&gt; と書くと通常は倍精度小数点型とみなされます。整数型リテラルを表現するには &lt;code&gt;1L&lt;/code&gt; のように数字の後に L を加える必要があります。&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;code&gt;identical()&lt;/code&gt; は、オブジェクトが同じかどうかを判定する関数です。&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R の強制型変換と NA の取り扱い</title>
      <link>http://blog.hoxo-m.com/2017/04/24/hoxom01_vector_type_coerce/</link>
      <pubDate>Mon, 24 Apr 2017 21:00:00 -2200</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/24/hoxom01_vector_type_coerce/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;R において欠損値を表す NA は非常に便利です。 NA は普通の R ユーザにとって自然に取り扱うことのできる概念ですが、それを支える内部の仕組みはわりと複雑です。 例えば、NA の型は論理値型ですが、一体それはなぜでしょうか？ 今日は R における強制型変換の話とからめてその謎をひも解いていきます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;ベクトルと型&lt;/h2&gt;
&lt;p&gt;R のベクトルは型を持ちます。&lt;/p&gt;
&lt;p&gt;例えば、1から3までの数値ベクトルを作成してみます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 1:3
x
#&amp;gt; [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトルの型を確認するには &lt;code&gt;typeof()&lt;/code&gt; 関数を使います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトル &lt;code&gt;x&lt;/code&gt; の型は整数型(integer)であることがわかります。&lt;/p&gt;
&lt;p&gt;他にも、例えば次のようなベクトルを作成してみます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, &amp;quot;NA&amp;quot;, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   &amp;quot;NA&amp;quot;  &amp;quot;DON&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、ベクトル &lt;code&gt;x&lt;/code&gt; は文字列型(character)になります。&lt;/p&gt;
&lt;p&gt;このように、Rのベクトルは必ず型を持ちます。&lt;/p&gt;
&lt;p&gt;では、1つのベクトルの中に異なる型の要素を含めるとどうなるでしょうか。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, 2, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   &amp;quot;2&amp;quot;   &amp;quot;DON&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、ベクトル &lt;code&gt;x&lt;/code&gt; 中に含まれる数値の &lt;code&gt;2&lt;/code&gt; は、文字列型の &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt; に&lt;strong&gt;強制型変換&lt;/strong&gt;されます。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;強制型変換&lt;/h2&gt;
&lt;p&gt;R のベクトルは、1つだけしか型を持つことができません。&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;したがって、異なる型の要素を結合してベクトルを作成しようとすると、型を統一するために、型の自動変換が行われます。これが強制型変換です。&lt;/p&gt;
&lt;p&gt;強制型変換にはルールがあります。結合しようとする要素の型の中で、最も柔軟性の高い型に変換されます。&lt;/p&gt;
&lt;p&gt;型の柔軟性は次の通りです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logical &amp;lt; integer &amp;lt; double &amp;lt; complex &amp;lt; character
(論理値型 &amp;lt; 整数型 &amp;lt; 倍精度小数点型 &amp;lt; 複素数型 &amp;lt; 文字列型)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先ほどの例で言うと、&lt;code&gt;&amp;quot;U&amp;quot;&lt;/code&gt; は character、&lt;code&gt;2&lt;/code&gt; は double、&lt;code&gt;&amp;quot;DON&amp;quot;&lt;/code&gt; は character なので、最も柔軟性の高い character 型に変換されたと言うわけです。&lt;/p&gt;
&lt;p&gt;他の例を挙げると、例えば、整数型と論理値型を結合すると、整数型に強制型変換されます。&lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1L, 2L, 3L, TRUE, FALSE)
x
#&amp;gt; [1] 1 2 3 1 0
typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複素数型と倍精度小数点型を結合すると、複素数型に強制型変換されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1 + 1i, 2 + 2i, 3, 4)
x
#&amp;gt; [1] 1+1i 2+2i 3+0i 4+0i
typeof(x)
#&amp;gt; [1] &amp;quot;complex&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おわかりのように、型の柔軟性は、低い方から高い方に自然に変換できるように決められています。&lt;/p&gt;
&lt;p&gt;どんな型でも文字列に変換することができるので、文字列の型が最も柔軟性が高いことがわかります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(TRUE, 1L, 1.0, 1+0i, &amp;quot;hoge&amp;quot;)
x
#&amp;gt; [1] &amp;quot;TRUE&amp;quot; &amp;quot;1&amp;quot;    &amp;quot;1&amp;quot;    &amp;quot;1+0i&amp;quot; &amp;quot;hoge&amp;quot;
typeof(x)
#&amp;gt; [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;-na-&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;強制型変換における NA の取り扱い&lt;/h2&gt;
&lt;p&gt;R には値が欠測していることを表すために NA という特別な値が用意されています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1, NA, 3)
x
#&amp;gt; [1]  1 NA  3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、この NA の型を調べてみると、logical になっています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;typeof(NA)
#&amp;gt; [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;したがって、NA は論理値型であると思われるかもしれませんが、それは違います。&lt;/p&gt;
&lt;p&gt;実は、Rでは、全部の型に対して NA が用意されています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;論理値型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;logical&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;整数型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;integer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_integer_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;倍精度小数点型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_real_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;複素数型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;complex&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_complex_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;文字列型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA_character_&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;その理由は強制型変換と深いつながりがあります。&lt;/p&gt;
&lt;p&gt;まず、NA は最も柔軟性の低い論理値型で定義されています。&lt;/p&gt;
&lt;p&gt;すなわち、論理値型のベクトルに NA が含まれている場合、強制型変換は行われません。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(TRUE, NA, FALSE)
x
#&amp;gt; [1]  TRUE    NA FALSE
typeof(x)
#&amp;gt; [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、整数型のベクトルに NA を含めたいとします。 NA は論理値型ですので、整数型に強制型変換しなければなりません。 そこで使用されるのが整数型の NA である NA_integer_ というわけです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(1L, NA, 3L)
x
#&amp;gt; [1]  1 NA  3
typeof(x)
#&amp;gt; [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表面上は NA と表示されますが、NA_integer_ に変換されていることは次のようにして確認できます。&lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;identical(x[2], NA)
#&amp;gt; [1] FALSE
identical(x[2], NA_integer_)
#&amp;gt; [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他の型でも同様に、NA は強制型変換のルールに従い、ベクトル中で最も柔軟性の高い型の NA に変換されます。&lt;/p&gt;
&lt;p&gt;例えば、文字列型に含まれる NA は NA_character_ に変換されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;U&amp;quot;, NA, &amp;quot;DON&amp;quot;)
x
#&amp;gt; [1] &amp;quot;U&amp;quot;   NA    &amp;quot;DON&amp;quot;
identical(x[2], NA_character_)
#&amp;gt; [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトの NA が論理値型である理由は、ここにあります。&lt;/p&gt;
&lt;p&gt;NA を柔軟性の最も低い論理値型とすることで、強制型変換のルールがうまく働き、最も自然な形で型変換を行うことができるのです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;デフォルトの NA が論理値型であることで、強制型変換のルールとうまく組み合わさり、自然な動きをすることがわかりました。&lt;/p&gt;
&lt;p&gt;すべての型の NA は、&lt;code&gt;is.na()&lt;/code&gt; を適用すると TRUE となります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sapply(list(NA, NA_integer_, NA_real_, NA_complex_, NA_character_), is.na)
#&amp;gt; [1] TRUE TRUE TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;したがって、ユーザは特に型を意識することなく NA を取り扱うことができます。&lt;/p&gt;
&lt;p&gt;このように、便利な機能の裏側には様々な仕組みが動いています。&lt;/p&gt;
&lt;p&gt;Rのこのような仕組みに興味を持った方は、参考文献に挙げた『R言語徹底解説』を読んでみてください。 Rの世界が広がると思います。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hadley Wickham 著、石田基広、市川太祐、高柳慎一、福島真太朗 訳『R言語徹底解説』共立出版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/432012393X&#34; class=&#34;uri&#34;&gt;https://www.amazon.co.jp/dp/432012393X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;もし、複数の型を持つベクトルが必要ならば、&lt;strong&gt;リスト&lt;/strong&gt; を使うことになります。&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;細かいことですが、R で &lt;code&gt;1&lt;/code&gt; と書くと通常は倍精度小数点型とみなされます。整数型リテラルを表現するには &lt;code&gt;1L&lt;/code&gt; のように数字の後に L を加える必要があります。&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;code&gt;identical()&lt;/code&gt; は、オブジェクトが同じかどうかを判定する関数です。&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ナウでヤングなRの環境変数管理方法</title>
      <link>http://blog.hoxo-m.com/2017/04/20/config/</link>
      <pubDate>Thu, 20 Apr 2017 08:02:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/20/config/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;style type=&#34;text/css&#34;&gt;
dt {
  clear: left;
  float: left;
  width: 15%;
  font-weight: bold;
  text-align: right;
  padding: 3px 15px 3px 0;
}
dd {
  margin: 0 0 0 14%;
  padding-top: 3px;
  padding-bottom: 3px;
}
&lt;/style&gt;
&lt;p&gt;こんにちは。ホクソエムのグローバル推進事業部にて本部長を努めます瓜生(&lt;i class=&#34;fa fa-twitter&#34;&gt;&lt;/i&gt;&lt;a href=&#34;https://twitter.com/u_ribo/&#34;&gt;@u_ribo&lt;/a&gt;)です。この記事ではRにおける環境変数の設定方法のおさらいと、ナウな手法を使った環境変数の管理方法について紹介します。&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;環境変数を利用していますか?&lt;/h2&gt;
&lt;p&gt;Rでは、利用している環境やユーザの設定を環境変数として記録・利用できるようになっています。具体的な項目については&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Environment-variable-index&#34;&gt;ドキュメント&lt;/a&gt;に記されている通りですが、例えばユーザのホームディレクトリ (&lt;code&gt;HOME&lt;/code&gt;)やロケール (&lt;code&gt;LC_ALL&lt;/code&gt;)などがあります。こうした環境変数は直接意識して利用することは稀ですが、頻繁に使う値やディレクトリのパスなどを環境変数として保存しておくと便利なことがあります。&lt;/p&gt;
&lt;p&gt;現在設定されている環境変数の値を確認するには&lt;code&gt;Sys.getenv()&lt;/code&gt;関数を実行します。引数に何も指定せずに実行すると全ての環境変数と値が出力されますが、引数に環境変数名を指定することで個別の値を参照することもできます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.getenv(&amp;quot;HOME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/uri&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;またRのセッション中で環境変数を設定したり変更が可能です。変更には&lt;code&gt;Sys.setenv()&lt;/code&gt;を使います。デフォルトでは存在しない&lt;code&gt;CODE_NAME&lt;/code&gt;という環境変数を作ってみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CODE_NAMEという環境変数は定義されていないので空白値が返ってくる
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数CODE_NAMEと値を与えます
Sys.setenv(&amp;quot;CODE_NAME&amp;quot; = &amp;quot;HOXO_URI&amp;quot;)
# 環境変数CODE_NAMEの値を参照します
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;HOXO_URI&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数を削除します (Rを再起動するとデフォルトで登録されていない環境変数は削除されます)
Sys.unsetenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この方法ではRの起動時に都度、環境変数を定義することになるので面倒です。そこでRでは&lt;code&gt;.Renviron&lt;/code&gt;や&lt;code&gt;.Rprofile&lt;/code&gt;という設定ファイルの中で環境変数を定義することができるようになっています (&lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34;&gt;参考&lt;/a&gt;)。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;config&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;configパッケージ&lt;/h2&gt;
&lt;p&gt;上記の設定ファイルは隠しファイルとなっており、管理が面倒なことがあります。また例えばテストや開発、一時的に使うといった&lt;strong&gt;用途に応じて異なる値の環境変数を用いたい&lt;/strong&gt;場合、これらのファイルを利用するのは優れた方法とはいえません。&lt;/p&gt;
&lt;p&gt;状況に応じて変数の値を切り替えたい… そういう時があると思いますっ!そこで今回紹介する&lt;strong&gt;config&lt;/strong&gt;パッケージの登場です！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/config&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/config&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;config&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;configの使い方&lt;/h3&gt;
&lt;p&gt;configパッケージは、YAMLファイルに変数として扱いたい項目と値を記述することでRからその値を参照可能にします。そのため、YAMLファイルを設定ファイルとして、項目と値を環境変数のように扱うことが可能になります。説明のため下記のようなconfig.ymlファイルを用意します。これは利用するユーザに応じてusernameとroleという変数の値を変更させるためのファイルとなります。&lt;/p&gt;
&lt;pre class=&#34;yml&#34;&gt;&lt;code&gt;default:
  username: &amp;quot;admin&amp;quot;
  role: &amp;quot;admin&amp;quot;

develop: 
  username: &amp;quot;dev&amp;quot;
  role: &amp;quot;admin&amp;quot;

guest:
  username: &amp;quot;guest&amp;quot;
  role: &amp;quot;user&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではconfigパッケージを使ってconfig.ymlの値を参照しましょう。configは現在GitHub上で開発が行われているので、githubinstallパッケージなどを使ってインストールする必要があります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;githubinstall&amp;quot;)
githubinstall::gh_install_packages(&amp;quot;config&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(config)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configの主要な関数は&lt;code&gt;get()&lt;/code&gt;です。この関数が設定ファイルを読み込みます。デフォルトでは作業ディレクトリにあるconfig.ymlファイルの中身を読みますが、読み込み関数の引数の変更によって設定ファイル名やパスを変更できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Rから扱いやすくするためオブジェクトとして保存する
conf &amp;lt;- config::get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;config::get()&lt;/code&gt;の値を一度オブジェクトとして保存しておくと、configの値が参照しやすくなります。あるいは&lt;code&gt;get()&lt;/code&gt;で直接変数名を指定するのも方法の一つです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$username&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$role&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(&amp;quot;role&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで&lt;code&gt;get()&lt;/code&gt;で指定可能な項目を確認してみましょう。&lt;code&gt;get()&lt;/code&gt;には次の引数が含まれます。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;value&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;設定ファイルconfig.ymlに記述された項目を指定することでその値を参照する。指定しない場合、config.yml中の全ての値を返す&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;config&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;環境変数&lt;code&gt;R_CONFIG_NAME&lt;/code&gt;で指定された設定項目。デフォルトで設定ファイルのdefaultに含まれる変数を扱うようになる&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;file&lt;/dt&gt;
&lt;dd&gt;設定ファイルを指定。デフォルトで作業ディレクトリに含まれるconfig.ymlを扱う。異なるパス、ファイル名の場合に指定する必要がある
&lt;/dd&gt;
&lt;dt&gt;use_parent&lt;/dt&gt;
&lt;dd&gt;上位のディレクトリに設定ファイルが含まれる場合、&lt;em&gt;FALSE&lt;/em&gt;を指定することで上位ディレクトリの設定ファイルを読み込まない
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt;のdefaultの値から、developの値に切り替える場合は次のコマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(config = &amp;quot;develop&amp;quot;)
## $username
## [1] &amp;quot;dev&amp;quot;
## 
## $role
## [1] &amp;quot;admin&amp;quot;
## 
## attr(,&amp;quot;config&amp;quot;)
## [1] &amp;quot;develop&amp;quot;
## attr(,&amp;quot;file&amp;quot;)
## [1] &amp;quot;config.yml&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私は、ギョームでよく使う環境変数（データベースのホストやAPIキーなど）は&lt;code&gt;config.yml&lt;/code&gt;に書いておいて、&lt;code&gt;config::get()&lt;/code&gt;でオブジェクトとして保存されたものを呼び出すという使い方をしています。ローカルとサーバ上のRStudio Serverで異なる値を利用する機会があるのでconfigが役立っています。なおGitリポジトリに登録する際は、cofigの内容が公開されても問題ないものか、今一度確認しましょう。プライベートリポジトリに保存しておくのも手段かもしれません。&lt;/p&gt;
&lt;p&gt;類似のパッケージ・プロジェクト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Miachol/configr&#34; class=&#34;uri&#34;&gt;https://github.com/Miachol/configr&lt;/a&gt; … こちらはCRANに登録されています。またYAMLだけでなくJSON形式での設定ファイルにも対応します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面倒な環境変数の管理にconfigパッケージ! 是非っ!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD

&lt;link href=&#34;#####../content/post/config_files/font-awesome-4.5.0/css/font-awesome.min.css&#34; rel=&#34;stylesheet&#34; /&gt;





/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>タカヤナギ＝サンの初更新</title>
      <link>http://blog.hoxo-m.com/2017/04/18/takayanagi-san-first/</link>
      <pubDate>Tue, 18 Apr 2017 19:40:14 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/18/takayanagi-san-first/</guid>
      <description>&lt;div id=&#34;hello-world&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;タカヤナギ=サンのHello, world&lt;/h2&gt;
&lt;p&gt;こんにちは、ホクソエムの高柳(通称：タカヤナギ＝サン)です。 IT(イット)やプログラミングは苦手なので、BLOG更新の一発目としてR的なHello, worldをしておきます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(1:10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/takayanagi-san-first_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DJタカヤナギ=サンで学ぶRを用いた画像操作</title>
      <link>http://blog.hoxo-m.com/2017/04/10/imager/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/10/imager/</guid>
      <description>&lt;div id=&#34;djr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;DJタカヤナギ=サンで学ぶRを用いた画像操作&lt;/h2&gt;
&lt;p&gt;こんにちは、ホクソエムの市川です。&lt;/p&gt;
&lt;p&gt;日々の業務の合間にちょっとクソコラを作りたいこと、あると思います。&lt;/p&gt;
&lt;p&gt;でもクソコラに手間はかけたくない。&lt;/p&gt;
&lt;p&gt;そんな時に使えるのが&lt;code&gt;imager&lt;/code&gt;パッケージです。&lt;/p&gt;
&lt;p&gt;ちなみに画像操作に使えるRのパッケージには他にも&lt;code&gt;EBImage&lt;/code&gt;パッケージ、&lt;code&gt;magick&lt;/code&gt;パッケージ等があります。&lt;/p&gt;
&lt;p&gt;それぞれに利点はあるのですが、&lt;code&gt;EBImage&lt;/code&gt;はbioconductorからインストールする必要があるので手間がかかり、&lt;code&gt;magick&lt;/code&gt;は画像の上に図形を描くのが意外と面倒だったりします。 繰り返しますがクソコラに手間はかけたくない。&lt;/p&gt;
&lt;p&gt;ということで今回はCC0ライセンスで公開されているDJタカヤナギ=サンの画像を用いて&lt;code&gt;imager&lt;/code&gt;パッケージの使い方について学びたいと思います。&lt;/p&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;imager&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像の読み込みと表示&lt;/h3&gt;
&lt;p&gt;画像の読み込みにはload.image()を用います。&lt;/p&gt;
&lt;p&gt;読み込んだ画像の情報はprint.cimg()を用います。画像のサイズは幅960px、高さ720pxとなっています。&lt;/p&gt;
&lt;p&gt;表示にはplot.cimg()を用います（ちなみにprint()およびplot()だけで、自動的にprint.cimg()、plot.cimg()が呼び出されます。なぜだかわかりますか？わかりますね？）&lt;/p&gt;
&lt;p&gt;ここではXY軸を表示したくないので&lt;code&gt;axes&lt;/code&gt;引数をFALSEに指定しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;imager&amp;quot;)
u &amp;lt;- &amp;quot;https://raw.githubusercontent.com/dichika/ojisan/master/takayanagi_dj.jpg&amp;quot; #DJタカヤナギ
dj &amp;lt;- load.image(u)
print(dj)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Image. Width: 960 pix Height: 720 pix Depth: 1 Colour channels: 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dj, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像上に図形を表示する&lt;/h3&gt;
&lt;p&gt;画像上に図形を表示する際はpx.hogehoge()とhightlight()を組み合わせます。 px.hogehoge()で図形のサイズ、座標を指定して、highlight()で表示です。 &lt;code&gt;r&lt;/code&gt;で半径を指定し、&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;y&lt;/code&gt;で表示する座標を指定します。 &lt;strong&gt;なお、図形は&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;y&lt;/code&gt;の中点に表示されるので注意してください。&lt;/strong&gt; その他の図形については?common_pixsetsを参照してください。&lt;/p&gt;
&lt;p&gt;ここで画像の幅と高さを取得するためにwidth()とheight()を用いています。 その他の画像情報取得関数については?cimg.dimensionsを参照してください。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dj, axes = TRUE)
highlight(px.circle(r = 40, x = 300, y = 720), col = &amp;quot;orange&amp;quot;)
highlight(px.diamond(r = 40, x = 600, y = 350), col = &amp;quot;green&amp;quot;)
highlight(px.square(r = 40, x = width(dj)*2, y = height(dj)), col = &amp;quot;black&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像上にテキストを表示する&lt;/h3&gt;
&lt;p&gt;テキストを表示するにはRの組込み関数のtext()を用います。 デフォルトでは指定したxy座標を中心にテキストが表示されます。 なお、implot()を用いて表示する方法がチュートリアルには紹介されているのですが、マルチバイト文字の表示に失敗します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(family=&amp;quot;Hiragino Kaku Gothic Pro W6&amp;quot;)
plot(dj, axes = FALSE)
text(x = width(dj)/2, y = height(dj)-100, labels = &amp;quot;キュッキュキュッキュ&amp;quot;, col = &amp;quot;orange&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像を切り取る&lt;/h3&gt;
&lt;p&gt;画像の一部を切り取るにはimsub()を用います。 画像の範囲指定には条件式が利用できます。 &lt;code&gt;%inr%&lt;/code&gt;演算子を用いると矩形で範囲指定できます。&lt;/p&gt;
&lt;p&gt;なお、ここで&lt;code&gt;%&amp;gt;%&lt;/code&gt;演算子を用いていますがこれはパイプ演算子と呼ばれるものであり、演算子左側の操作を右側の操作に受け渡すものです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% imsub(x &amp;gt; width(dj)/2) %&amp;gt;% plot(axes = TRUE) # 画像右半分を切り取る&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% imsub(x %inr% c(411,722), y %inr% c(67,349)) %&amp;gt;% plot(axes = TRUE) # 矩形による範囲指定&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この操作はインタラクティブに行うことも可能です。 この際はgrabRect()を用います。 表示された画像に対して、矩形で範囲指定すると、画像左上端と右下端の点の座標が返されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grabRect(dj) # インタラクティブな範囲指定
# 以下のような結果が返される。
# x0  y0  x1  y1 
# 411  67 722 349 &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像をぼかす&lt;/h3&gt;
&lt;p&gt;ちょっとおじさんの画像ばかり見ていると目が辛くなってきましたね。 画像をぼかしてみましょう。 画像をぼかすにはisoblur()を用います。 &lt;code&gt;sigma&lt;/code&gt;の値を大きくすればするほど画像はぼかされていきます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% isoblur(sigma = 15) %&amp;gt;% plot(axes =FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;クソコラ実践&lt;/h3&gt;
&lt;p&gt;さて、ここまでの操作を用いてクソコラを作ってみましょう。 クソコラを作る前にここで別のおじさんを投入します。 こちらもCC0で公開されている画像です。桜が満開ですね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan &amp;lt;- load.image(&amp;quot;https://raw.githubusercontent.com/dichika/ojisan/master/sakura4.jpg&amp;quot;) # 別のおじさん
plot(ojisan, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この画像とDJタカヤナギ=サンの画像を用いて、クソコラを作ります。 まずresize()を用いて、2つの画像のサイズを揃えます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj_mod &amp;lt;- dj %&amp;gt;% resize(size_x = 500, size_y = 500)
ojisan_mod &amp;lt;- ojisan %&amp;gt;% resize(size_x = 500, size_y = 500)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次におじさんの画像から顔画像を抽出します。 この際MS FACE APIを利用します。 本APIの利用方法については以下の記事等をご参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Almond/items/9b1df61ec521c9e3a9b0&#34; class=&#34;uri&#34;&gt;http://qiita.com/Almond/items/9b1df61ec521c9e3a9b0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/dichika/20170408/p1&#34; class=&#34;uri&#34;&gt;http://d.hatena.ne.jp/dichika/20170408/p1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MS_FACE_KEY &amp;lt;- &amp;quot;取得したスクリプトキー&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお、APIを利用する際にいったんsave.image()を用いて、画像を一時ファイルに保存しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- tempfile(fileext = &amp;quot;.png&amp;quot;)
ojisan_mod %&amp;gt;% save.image(tmp)

library(&amp;quot;httr&amp;quot;)
url_base &amp;lt;- &amp;quot;https://westus.api.cognitive.microsoft.com/face/v1.0/detect&amp;quot;
result &amp;lt;- POST(url_base, 
               body = upload_file(tmp), 
               query = list(returnFaceAttributes=&amp;quot;age,gender,headPose,smile,facialHair,glasses,emotion&amp;quot;, 
                            language=&amp;quot;en&amp;quot;), 
               add_headers(.headers = c(`Content-Type`=&amp;quot;application/octet-stream&amp;quot;, 
                                        `Ocp-Apim-Subscription-Key`=MS_FACE_KEY
               )
               )
) %&amp;gt;% content()
bbox &amp;lt;- result[[1]]$faceRectangle
ojisan_sub &amp;lt;- ojisan_mod %&amp;gt;% imsub(x %inr% c(bbox$left, bbox$left + bbox$width),
                                   y %inr% c(bbox$top, bbox$top + bbox$height))
plot(ojisan_sub, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;抽出した顔画像をDJタカヤナギ=サンの画像に重ねてみましょう。 isoblur()でぼかした後、imdraw()で画像を重ねています。 これはこれで味わい深いですが、ちょっと顔画像が大きいですね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan_blur &amp;lt;- ojisan_sub %&amp;gt;% isoblur(sigma = 5)
ojisan_pos_x &amp;lt;- 100
ojisan_pos_y &amp;lt;- 200
dj_ojisan &amp;lt;- dj %&amp;gt;% imdraw(ojisan_blur, x = ojisan_pos_x, y = ojisan_pos_y, opacity = 0.9)
plot(dj_ojisan, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;imresize()でscaleを50%に指定して縮小して重ねることにします。 だいぶ自然なクソコラになってきましたね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan_blur_half &amp;lt;- ojisan_sub %&amp;gt;% isoblur(sigma = 5) %&amp;gt;% imresize(scale = 0.5)
dj_ojisan2 &amp;lt;- dj %&amp;gt;% imdraw(ojisan_blur_half, x = ojisan_pos_x, y = ojisan_pos_y, opacity = 0.9)
plot(dj_ojisan2, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;それでは最後の仕上げです。 わかりやすいように赤い円で強調し文字を加えます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(family=&amp;quot;Hiragino Kaku Gothic Pro W6&amp;quot;)
plot(dj_ojisan2, axes = FALSE)
highlight(px.circle(r = bbox$width*0.5*1.1, x = ojisan_pos_x*2.6, y = ojisan_pos_y*2.5), col = &amp;quot;red&amp;quot;)
text(x = width(dj)/2, y = height(dj)-100, labels = &amp;quot;おわかりいただけただろうか&amp;quot;, col = &amp;quot;white&amp;quot;, cex = 1.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/imager_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;いかがでしたか？ Rだけで自然な心霊写真が作れましたね。&lt;/p&gt;
&lt;p&gt;今回使った&lt;code&gt;imager&lt;/code&gt;パッケージの機能はどれも基本的なものです。 公式サイトには充実した機能紹介があります。ぜひ参考にして皆さんもクソコラ製作を効率化してみてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dahtah.github.io/imager/&#34; class=&#34;uri&#34;&gt;http://dahtah.github.io/imager/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Global Tokyo.Rに参加しました</title>
      <link>http://blog.hoxo-m.com/2017/04/08/global-tokyor2/</link>
      <pubDate>Sat, 08 Apr 2017 21:32:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/08/global-tokyor2/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;p&gt;2017年4月1日、ドイツのRユーザ &lt;a href=&#34;https://twitter.com/henningsway&#34;&gt;@henningsway&lt;/a&gt;が東京へやって来るということで、&lt;a href=&#34;https://japanr.connpass.com/event/54006/&#34;&gt;Global Tokyo.R#2&lt;/a&gt;が開催されました。ホクソエム各位も運営や発表を行いました!!というわけで今回の記事はGlobal Tokyo.Rの参加レポートとなります。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;77%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Contents&lt;/th&gt;
&lt;th&gt;Presenter&lt;/th&gt;
&lt;th&gt;Slide&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;No packages? OK, develop it !!!&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@hoxo_m&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.slideshare.net/hoxo_m/r-packages-githubinstall-magicfor-dplyrteradata&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Bayesian analysis of psychological pressure during penalty shootout&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@Med_KU&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Blogdown&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@henningsway&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Customizing Awesome Maps with Leaflet&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@u_ribo&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Awesome talk&lt;/td&gt;
&lt;td&gt;@tomomoto&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;R package to tune parameters using Bayesian Optimization&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@y__mattu&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ymattu.github.io/Global-TokyoR-2/slide.html#/&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Rcpp for everyone&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;citation&#34;&gt;@teuder&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://speakerdeck.com/teuder/rcpp-for-everyone&#34;&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;no-packages-ok-develop-it-by-hoxo_m&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;No packages? OK, develop it !!! by hoxo_m&lt;/h2&gt;
&lt;p&gt;当社代表@hoxo_mの発表です。我々の心のありかとなっている「なければ作る」という言葉にもとづき、GitHub上のパッケージのインストールを簡易に行う&lt;a href=&#34;https://cran.rstudio.com/web/packages/githubinstall/&#34;&gt;githubinstallパッケージ&lt;/a&gt;や&lt;a href=&#34;https://cran.rstudio.com/web/packages/magicfor/&#34;&gt;magicfor&lt;/a&gt;、&lt;a href=&#34;https://github.com/hoxo-m/dplyr.teradata&#34;&gt;dplyr.teradata&lt;/a&gt;の開発背景や導入の話でした。&lt;/p&gt;
&lt;p&gt;これまでに数多くのパッケージを作っている@hoxo_mだからこその「なければ作る」の一言は説得力があります。&lt;/p&gt;
&lt;p&gt;スライド: &lt;a href=&#34;https://www.slideshare.net/hoxo_m/r-packages-githubinstall-magicfor-dplyrteradata&#34; class=&#34;uri&#34;&gt;https://www.slideshare.net/hoxo_m/r-packages-githubinstall-magicfor-dplyrteradata&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bayesian-analysis-of-psychological-pressure-during-penalty-shootout-by-med_ku&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bayesian analysis of psychological pressure during penalty shootout by Med_KU&lt;/h2&gt;
&lt;p&gt;発表者が会場にいないスタイルの発表にざわつきがありました。サッカーのペナルティーキックの試行に対する影響をrstanで推定するという内容でした。Find A Job、だそうです。なお発表スライドはアップロードされないみたいです。残念！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
今日の話はこのあたりです。スライドは面倒なのであげません。 &lt;a href=&#34;https://twitter.com/hashtag/globaltokyor?src=hash&#34;&gt;#globaltokyor&lt;/a&gt;&lt;a href=&#34;https://t.co/UZFWohtatj&#34;&gt;https://t.co/UZFWohtatj&lt;/a&gt;
&lt;/p&gt;
— YF (&lt;span class=&#34;citation&#34;&gt;@Med_KU&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/Med_KU/status/848063699579424769&#34;&gt;April 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;スライド: -&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown-by-henningsway&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Blogdown by henningsway&lt;/h2&gt;
&lt;p&gt;RMarkdownで書けるブログシステム&lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdownパッケージ&lt;/a&gt;の説明です。henningswayさんがライブコーディングでブログを構築、記事を書き上げて会場は大盛り上がりでした。また、スライドの作成もRMarkdown (&lt;a href=&#34;https://github.com/yihui/xaringan&#34;&gt;xaringan&lt;/a&gt;)を使っており、日本のRユーザの知らない情報をたくさん共有していただけました。&lt;/p&gt;
&lt;p&gt;海外でもブログは就職や転職活動を行う上でも利用されているようで、Rの実行結果をそのまま記事にできるblogdownは大きな可能性を持っているように感じました。皆さんもブログ是非っ！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
Henningさんの発表、blogdownでラクラクブログ作成。ブログを作る理由はドイツでも日本と大して変わらず、&lt;br&gt;・ドキュメンテーション&lt;br&gt;・コミュニティに貢献&lt;br&gt;・就職や転職&lt;br&gt;・文章やweb技術の練習&lt;br&gt;みたいです。就活前にブログ、是非！！ &lt;a href=&#34;https://twitter.com/hashtag/globaltokyor?src=hash&#34;&gt;#globaltokyor&lt;/a&gt; &lt;a href=&#34;https://t.co/uY6Ar9FV0M&#34;&gt;pic.twitter.com/uY6Ar9FV0M&lt;/a&gt;
&lt;/p&gt;
— 株式会社ホクソエム (&lt;span class=&#34;citation&#34;&gt;@hoxom_inc&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/hoxom_inc/status/848083410484568065&#34;&gt;April 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;ちなみにですが、このブログもblogdownを使っています。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
どうみても写輪眼です本当にありがとうございました &lt;a href=&#34;https://t.co/7A8Xht5z7C&#34;&gt;https://t.co/7A8Xht5z7C&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/globaltokyor?src=hash&#34;&gt;#globaltokyor&lt;/a&gt;
&lt;/p&gt;
— カーテン (&lt;span class=&#34;citation&#34;&gt;@dichika&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/dichika/status/848080725857386498&#34;&gt;April 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;スライド: -&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;customizing-awesome-maps-with-leaflet-by-u_ribo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Customizing Awesome Maps with Leaflet by u_ribo&lt;/h2&gt;
&lt;p&gt;leafletパッケージを使ったインタラクティブな地図操作の方法を紹介しました。また、leafletの機能を拡張する&lt;a href=&#34;https://github.com/bhaskarvk/leaflet.extras&#34;&gt;leaflet.extras&lt;/a&gt;についても話しました。&lt;/p&gt;
&lt;p&gt;ちなみにこんなことをしていました。スライドは公開しておりません。すみません！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
昨日の &lt;a href=&#34;https://twitter.com/hashtag/globaltokyor?src=hash&#34;&gt;#globaltokyor&lt;/a&gt; でもやった気象庁の桜開花情報データを使った桜の開花情報マッピング(Leaflet + Shiny) 後半の3月23日からポンポンポンと🌸開花していきます🍡 &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/hcRWrJx92g&#34;&gt;pic.twitter.com/hcRWrJx92g&lt;/a&gt;
&lt;/p&gt;
— {Shinya🍉Uryu} (&lt;span class=&#34;citation&#34;&gt;@u_ribo&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/u_ribo/status/848527196981297154&#34;&gt;April 2, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&#34;&gt;#はてなブログ&lt;/a&gt;&lt;br&gt;leafletでベースタイルを表示させずにポリゴンだけを表示する方法と投影法を変更する方法 - まだ厨二病&lt;a href=&#34;https://t.co/xdGQd28HNl&#34;&gt;https://t.co/xdGQd28HNl&lt;/a&gt; &lt;a href=&#34;https://t.co/ULaGwD7yu7&#34;&gt;pic.twitter.com/ULaGwD7yu7&lt;/a&gt;
&lt;/p&gt;
— {Shinya🍉Uryu} (&lt;span class=&#34;citation&#34;&gt;@u_ribo&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/u_ribo/status/849412792415395842&#34;&gt;April 5, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;スライド: -&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;awesome-talk-by-tomomoto&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Awesome talk by tomomoto&lt;/h2&gt;
&lt;p&gt;awesomeになるにはどうすれば良いか。アメリカ西海岸のベンチャー企業のデータ分析担当の組織体制や取り組みについて貴重な話を伺えました。&lt;/p&gt;
&lt;p&gt;スライド: -&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-package-to-tune-parameters-using-bayesian-optimization-by-y__mattu&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R package to tune parameters using Bayesian Optimization by y__mattu&lt;/h2&gt;
&lt;p&gt;既存パッケージによるベイズ最適化を行う際のチューニングが手間という理由から、パッケージを作ったという話でした。RMarkdownを使ったスライドでは、途中でスライドに落書きを行うなど、まるで講義・セミナーのような発表でした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.comymattu/MlBayesOpt&#34;&gt;MlBayesOptパッケージ&lt;/a&gt;、是非！&lt;/p&gt;
&lt;p&gt;スライド: &lt;a href=&#34;https://ymattu.github.io/Global-TokyoR-2/slide.html#/&#34; class=&#34;uri&#34;&gt;https://ymattu.github.io/Global-TokyoR-2/slide.html#/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
Today&#39;s presentation slide is published on GitHub.&lt;a href=&#34;https://t.co/TFl7x2514X&#34;&gt;https://t.co/TFl7x2514X&lt;/a&gt;
&lt;/p&gt;
— Yuya MATSUMURA (&lt;span class=&#34;citation&#34;&gt;@y__mattu&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/y__mattu/status/848065272762187777&#34;&gt;April 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;rcpp-for-everyone-by-teuder&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rcpp for everyone by teuder&lt;/h2&gt;
&lt;p&gt;@teuderさんの発表は、Rcppについて興味があるけどどうしたらわからないという方向けのプレゼンテーションでした。スライドにも書かれていますが、海外にはRcppに関する文書がいくつか見られます。しかし日本にはそれに該当するものがありません…。そこで「なければ作る」の登場です。@teuderさんはなんとRcpp本の執筆プロジェクトを進められているそうです！こちらも期待ですね。&lt;/p&gt;
&lt;p&gt;スライド: &lt;a href=&#34;https://speakerdeck.com/teuder/rcpp-for-everyone&#34; class=&#34;uri&#34;&gt;https://speakerdeck.com/teuder/rcpp-for-everyone&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;
本日の発表資料です。微妙にバージョンが違いますが。&lt;a href=&#34;https://t.co/EQMIg9bPjJ&#34;&gt;https://t.co/EQMIg9bPjJ&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/globaltokyor?src=hash&#34;&gt;#globaltokyor&lt;/a&gt;
&lt;/p&gt;
— 津駄 Masaki E. Tsuda (&lt;span class=&#34;citation&#34;&gt;@teuder&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/teuder/status/848148912024178689&#34;&gt;April 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;会場案内や準備・片付けを手伝ってくれた方々や、会場および懇親会の提供をして頂いた株式会社リクルートコミュニケーションズさんに感謝です。次回のGlobal Tokyo.Rで会いましょう！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;写真&lt;/h2&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;集合写真&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#39;../../../../../../../img/globaltokyor_photo1.jpeg&#39; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;p&gt;関連した記事&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/dichika/20170402/p1&#34;&gt;集合写真のメガネの数をカウントする&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ホクソエムブログの作り方</title>
      <link>http://blog.hoxo-m.com/2017/03/29/hello-world/</link>
      <pubDate>Wed, 29 Mar 2017 19:40:14 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/03/29/hello-world/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;img src=&#39;../../../../../../../img/hoxom_inc_logo_crop250.png&#39; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;p&gt;ホクソエム公式ブログは次の方法で構築されました。備忘録として記録しておきます。またRMarkdownを使った更新方法についてもまとめます。&lt;/p&gt;
&lt;div class=&#34;section level1&#34;&gt;
&lt;h1&gt;システム&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Pages (ホスティング)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt; (RMarkdown + Hugo)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;blogdownのインストールと設定&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;rstudio/blogdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GitHubからblogdownパッケージをインストール。ローカルにhugoシステムが構築されている必要があるため、hugoをインストールしていない場合は次のコマンドを実行のこと。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::install_hugo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テーマは&lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;いくつか選べる&lt;/a&gt;が、ページ構成がblogdownパッケージと相性が悪いテーマもあるため注意が必要。今回は&lt;a href=&#34;http://themes.gohugo.io/ghostwriter/&#34;&gt;ghostwriter&lt;/a&gt;テーマを採用した。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blogdown::new_site()&lt;/code&gt;のtheme引数に該当のテーマリポジトリを入力して実行すると、ブログに必要なファイルや構築される。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(blogdown)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_site(sample = FALSE, 
         theme  = &amp;quot;jbub/ghostwriter&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RStudioを利用している場合、&lt;code&gt;blogdown::new_site()&lt;/code&gt;を実行した段階でViewerパネルにブログページが表示される。これはブログをプレビューする&lt;code&gt;serve_site()&lt;/code&gt;の実行結果となっている。&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;ディレクトリ構成&lt;/h2&gt;
&lt;p&gt;簡単に説明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blog/
  |- archetypes/
  |- config.toml
  |- config.yaml
  |- content/
      |- page/
      |- post/
          |- hello-world.Rmd
          |- hello-world.html
      |- project/
  |- data/
  |- docs/
  |- layouts/
  |- public/
  |- static
      |- img/
  |- themes/
      |- ghostwriter/&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;config.toml-config.yaml&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;config.toml, config.yaml&lt;/h3&gt;
&lt;p&gt;ブログの大まかな設定。SNS連携や独立ページなどの管理。linkedinなども紐付けられるが、今はしていない。&lt;/p&gt;
&lt;p&gt;大事そうなこととして、個別ページのURLは&lt;code&gt;/:year/:month/:day/:filename/&lt;/code&gt;という形式になっている。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;content&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;contentフォルダ&lt;/h3&gt;
&lt;p&gt;ここに書いた記事やファイルの内容が&lt;code&gt;serve_site()&lt;/code&gt;実行時に反映される。&lt;strong&gt;重要&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;datastatic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;dataおよびstaticフォルダ&lt;/h2&gt;
&lt;p&gt;staticフォルダはブログ全体で利用する画像やcssなどの静的なファイルを保存するのに向く。dataフォルダはRで使うデータを置いておくと良いのかも（公開されることに留意）。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;publicdocs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;publicおよびdocsフォルダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;serve_site()&lt;/code&gt;を実行すると、configやthemeの設定に従い、contentフォルダの内容がpublicフォルダに反映される。&lt;strong&gt;このフォルダの内容をdocsフォルダに移動することでページが公開される&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;themes&lt;/h2&gt;
&lt;p&gt;テーマファイルが置かれている。ブログ全体のレイアウトやデザインを変更する場合にはこの中のファイルをいじくることになる。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section level1&#34;&gt;
&lt;h1&gt;記事の追加・更新&lt;/h1&gt;
&lt;p&gt;RMarkdownで書く。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;ホクソエムブログの作り方&amp;quot;
author: &amp;quot;Shinya Uryu&amp;quot;
date: 2017-03-29T19:40:14-09:00
tags: [&amp;quot;sample&amp;quot;]
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というyamlフロントマターをテンプレートとして用いる。tagsの部分は&lt;code&gt;[&amp;quot;hoge&amp;quot;, &amp;quot;fuga&amp;quot;, &amp;quot;piyo&amp;quot;]&lt;/code&gt;のようにクオテーションで囲み、カンマ区切りで記述することで、&lt;code&gt;tags/hoge&lt;/code&gt;ページに記事がまとめられる。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(&amp;quot;teramonagi&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;teramonagi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plotはそのまま貼り付けられる
library(&amp;quot;yeah&amp;quot;)
teramonagi()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/hello-world_files/figure-html/teramonagi_san-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;記事が完成したら&lt;code&gt;serve_site()&lt;/code&gt;を実行。表示を確認し、publicフォルダを丸ごとdocsフォルダとしてコピー、GitHubにプッシュすることで公開となる。&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://blog.hoxo-m.com/page/about/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>http://blog.hoxo-m.com/page/about/</guid>
      <description>

&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean nec dolor in magna lobortis egestas. Suspendisse eu erat tempor, tristique neque eu, convallis nulla. Curabitur vel bibendum lacus, at semper mauris. Suspendisse aliquet commodo ex, sed sagittis metus aliquam id. Maecenas feugiat rutrum lorem vel imperdiet. Nullam ornare lectus ut enim finibus, et porttitor mi tincidunt. Aenean lacinia, leo quis vehicula eleifend, quam libero sagittis erat, at euismod augue mauris et sapien. Sed id vehicula lectus, sit amet auctor ipsum. Nunc sed massa vel ex condimentum aliquam in a enim. Cras enim sem, tristique eu enim ac, congue commodo mi. Integer quis orci at dolor blandit eleifend.&lt;/p&gt;

&lt;h2 id=&#34;school&#34;&gt;School&lt;/h2&gt;

&lt;p&gt;Sed quis pulvinar nisi, sed dapibus lacus. Mauris tempus ex ut ipsum facilisis interdum. Integer feugiat urna sed feugiat tempor. Quisque dictum vestibulum feugiat. Nunc nec est volutpat lorem imperdiet egestas sit amet ut orci. Aliquam venenatis neque ipsum, a placerat lectus cursus at. Donec pellentesque tellus hendrerit faucibus posuere. Etiam gravida consequat lectus, volutpat consectetur velit convallis nec. Praesent sagittis luctus dignissim.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>お問い合わせ</title>
      <link>http://blog.hoxo-m.com/page/contact/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>http://blog.hoxo-m.com/page/contact/</guid>
      <description>&lt;div class=&#34;google-form&#34;&gt;&lt;iframe src=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeu1juP3SLIG9Ll1moclNrdAgkViXSIKUoviuy9cJVGn5M1Ew/viewform?embedded=true&#34; width=&#34;800&#34; height=&#34;600&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34;&gt;Loading ...&lt;/iframe&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My awesome project</title>
      <link>http://blog.hoxo-m.com/project/my-awesome-project/</link>
      <pubDate>Tue, 18 Nov 2014 02:13:50 +0000</pubDate>
      
      <guid>http://blog.hoxo-m.com/project/my-awesome-project/</guid>
      <description>

&lt;h2 id=&#34;about-project&#34;&gt;About project&lt;/h2&gt;

&lt;p&gt;Aenean ipsum justo, semper eu nisl ut, pretium tincidunt sem. Praesent et diam sit amet lacus lobortis dictum a id lacus. Quisque hendrerit sit amet turpis eu varius. Ut id lorem ac felis ultrices tincidunt. Pellentesque consequat arcu ac fringilla imperdiet. Phasellus pellentesque, sapien non pulvinar blandit, sapien ante aliquet felis, vel porttitor sapien ante in lacus. Fusce non urna aliquet, malesuada nibh vel, luctus urna. Phasellus ut lacus molestie, varius purus quis, malesuada lorem.&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docs&#34;&gt;Docs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/spf13/hugo&#34;&gt;https://godoc.org/github.com/spf13/hugo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>