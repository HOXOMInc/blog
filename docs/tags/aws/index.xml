<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on 株式会社ホクソエムのブログ</title>
    <link>http://blog.hoxo-m.com/http://blog.hoxo-m.com/tags/aws/</link>
    <description>Recent content in Aws on 株式会社ホクソエムのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>HOXOM, Inc.</copyright>
    <lastBuildDate>Tue, 18 Jul 2017 21:02:11 -0900</lastBuildDate>
    <atom:link href="/http://blog.hoxo-m.com/tags/aws/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>awe.s3パッケージでRからのAWS S3とのファイルやりとりを行う</title>
      <link>http://blog.hoxo-m.com/http://blog.hoxo-m.com/2017/07/18/aws_s3_intro/</link>
      <pubDate>Tue, 18 Jul 2017 21:02:11 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/http://blog.hoxo-m.com/2017/07/18/aws_s3_intro/</guid>
      <description>&lt;p&gt;ドーモ。ホクソエムです。更新が久しくなってしまいました。ホクソエムでは現在、Amazon Web Service (AWS)を利用していないのですが、本職の方でS3に触れる機会があったので、RからS3への操作を行うためのパッケージ &lt;strong&gt;awe.s3&lt;/strong&gt; を紹介したいと思います。&lt;/p&gt;
&lt;p&gt;ASW S3とは、AWSが提供するサービスの一つで、オンラインでのファイルストレージとして利用できます。ストレージするファイルの容量・種類は問わないので、一時的なデータや画像の保存先として使われているのではないでしょうか。また、柔軟にアクセス制限やファイルのライフサイクル（自動的な削除）がかけられるのも特徴です。S3では、バケットと呼ばれるフォルダのような構造と、オブジェクト（データ）を管理します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;awe.s3&lt;/strong&gt;パッケージは、数多くの便利なRパッケージを行っている&lt;a href=&#34;https://ropensci.org&#34;&gt;ROpenSci&lt;/a&gt;のメンバーでもあるThomas J. Leeperらが活動する&lt;a href=&#34;https://github.com/cloudyr&#34;&gt;cloudyr&lt;/a&gt;というRのチームが開発しています。cloudyrのリポジトリには、今回紹介する&lt;strong&gt;awe.s3&lt;/strong&gt;のほか、同じAWSのサービスであるES2管理やLambdaのための&lt;strong&gt;aws.ec2&lt;/strong&gt;、&lt;strong&gt;aws.lambda&lt;/strong&gt;なども含まれています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudyr/aws.s3&#34; class=&#34;uri&#34;&gt;https://github.com/cloudyr/aws.s3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;awe.s3&lt;/strong&gt;はCRANに登録されていますので、次のコマンドでインストールしましょう。また、S3の操作に必要なアクセスキーとIDは、IAM (Identity and Access Management) Management Consoleから発行しておいてください。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;aws.s3&amp;quot;, dependencies = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(aws.s3)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;アカウントとの紐付け&lt;/h2&gt;
&lt;p&gt;早速、ストレージしたファイルへのアクセスを行いたいところですが、まずはアクセスキーIDとシークレットキーを使った認証を行うことが必要です。&lt;/p&gt;
&lt;p&gt;cloudyrが携わるAWS関係のRパッケージでは、&lt;code&gt;Sys.setenv()&lt;/code&gt;で設定されている環境変数を利用します。これらが&lt;code&gt;.Rprofile&lt;/code&gt;等に記載されていない場合は、コンソールで&lt;code&gt;Sys.setenv()&lt;/code&gt;を行いましょう。必要な情報は、アクセスキーID、シークレットキー、利用しているリージョン（地域）です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数の値を確認
Sys.getenv(&amp;quot;AWS_DEFAULT_REGION&amp;quot;)
# [1] &amp;quot;&amp;quot;

Sys.setenv(&amp;quot;AWS_DEFAULT_REGION&amp;quot; = &amp;quot;&amp;lt;リージョン&amp;gt;&amp;quot;, # us-east-2 など
           &amp;quot;AWS_ACCESS_KEY_ID&amp;quot; = &amp;quot;&amp;lt;アクセスキーID&amp;gt;&amp;quot;,
           &amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot; = &amp;quot;&amp;lt;シークレットキー&amp;gt;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;複数アカウントがある場合、AWSの発行するcredentialsファイルを使った署名を行うこともできます。これには&lt;strong&gt;awe.s3&lt;/strong&gt;インストール時に依存パッケージとしてインストールされる&lt;strong&gt;aws.signature&lt;/strong&gt;の&lt;code&gt;use_credentials()&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# defaultのアカウント情報を用いた署名
aws.signature::use_credentials()

# hoxouri ユーザのアカウント情報を利用する場合
aws.signature::use_credentials(profile = &amp;quot;hoxouri&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続が成功しているかを確かめるため、バケットの一覧を表示してみます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bucketlist()
#              Bucket             CreationDate
# 1 aws.s3.test170418 2017-04-18T04:35:22.000Z
# 2        hoxom-blog 2017-07-18T11:02:47.000Z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;うまくできているようですね。&lt;/p&gt;
&lt;p&gt;特定のバケットのオブジェクトを出力するには&lt;code&gt;get_bucket()&lt;/code&gt;を使います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_bucket(&amp;quot;aws.s3.test170418&amp;quot;)
# Bucket: aws.s3.test170418 
# 
# named list()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;どうやらこのバケットにはまだ何も入っていないようです。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;オブジェクト操作&lt;/h2&gt;
&lt;p&gt;それでは、バケットに対してオブジェクト（データ）を保存したり、バケット内のオブジェクトへの操作を行いましょう。&lt;strong&gt;awe.s3&lt;/strong&gt;では、次のようなオブジェクト操作が可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rオブジェクト(.Rdata, .rds)の読み書き (&lt;code&gt;s3save()&lt;/code&gt;, &lt;code&gt;s3saveRDS()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;R関数を使ったRへの読み書き (&lt;code&gt;s3read_using()&lt;/code&gt;, &lt;code&gt;s3write_using()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ローカルファイルのバケットへの保存 (&lt;code&gt;put_object()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;バケットからのローカルへの保存 (&lt;code&gt;get_object()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;バケット、オブジェクトの削除 (&lt;code&gt;delete_bucket()&lt;/code&gt;, &lt;code&gt;delete_object()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例として、mtcarsオブジェクト(データフレーム)をS3に保存します。Rオブジェクトとして保存したい時は&lt;code&gt;s3save()&lt;/code&gt;で行います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s3save(mtcars, bucket = &amp;quot;aws.s3.test170418&amp;quot;, object = &amp;quot;mtcars.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一引数で対象のRオブジェクト、第二引数で対象のバケット名、第三引数のobject引数ではオブジェクト名を与えます。関数の実行後、コンソールには何も表示されませんが、エラーがでなければアップロードは成功しているはずです。改めてバケットの中身を出力してみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_bucket(&amp;quot;aws.s3.test170418&amp;quot;)
# Bucket: aws.s3.test170418 
# 
# $Contents
# Key:            mtcars.rds 
# LastModified:   2017-07-18T11:33:04.000Z 
# ETag:           &amp;quot;1bf2269b855ca97b628582dc29962eb1&amp;quot; 
# Size (B):       1235 
# Owner:          suika1127 
# Storage class:  STANDARD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次はcsvをアップロードする例です。Rオブジェクトではなくcsvなどのファイルで保存したい時は&lt;code&gt;readr::write_csv()&lt;/code&gt;などの関数を使いテキストファイルにしておきましょう。またその際は&lt;code&gt;put_object()&lt;/code&gt;を使い、ファイルのアップロードを行います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  readr::write_csv(&amp;quot;sample_mtcars.csv&amp;quot;)
put_object(file = &amp;quot;sample_mtcars.csv&amp;quot;, 
           object = &amp;quot;sample_mtcars.csv&amp;quot;, 
           # バケットにはフォルダを作ることができますが、bucket引数で指定（なければ作成される）できます
           bucket = &amp;quot;aws.s3.test170418/csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今度は保存したオブジェクトをRで利用可能な状態にします。対象がRオブジェクトであれば&lt;code&gt;s3load&lt;/code&gt;、&lt;code&gt;readr&lt;/code&gt;や&lt;code&gt;readxl&lt;/code&gt;で読み込めるファイルであれば&lt;code&gt;s3read_using()&lt;/code&gt;を用います。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s3load(&amp;quot;mtcars.rds&amp;quot;, bucket = &amp;quot;aws.s3.test170418&amp;quot;)
ls()
# [1] &amp;quot;mtcars&amp;quot;

s3read_using(readr::read_csv, object = &amp;quot;sample.csv&amp;quot;, 
             bucket = &amp;quot;aws.s3.test170418/csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rdsファイルに保存したmtcarsオブジェクトが利用できるようになりました。&lt;/p&gt;
&lt;p&gt;私も使い始めたばかりで、&lt;strong&gt;aws.s3&lt;/strong&gt;パッケージの全てを紹介しきれませんが、基本的なことはできたかと思います。つどコンソールを叩かず、集計結果等を保存できる、データを引っ張ってこれるので便利ですね。&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>