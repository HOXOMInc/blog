<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reproducible on 株式会社ホクソエムのブログ</title>
    <link>http://blog.hoxo-m.com/tags/reproducible/</link>
    <description>Recent content in Reproducible on 株式会社ホクソエムのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>HOXOM, Inc.</copyright>
    <lastBuildDate>Thu, 20 Apr 2017 08:02:00 -0900</lastBuildDate>
    <atom:link href="http://blog.hoxo-m.com/tags/reproducible/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ナウでヤングなRの環境変数管理方法</title>
      <link>http://blog.hoxo-m.com/2017/04/20/config/</link>
      <pubDate>Thu, 20 Apr 2017 08:02:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/2017/04/20/config/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;style type=&#34;text/css&#34;&gt;
dt {
  clear: left;
  float: left;
  width: 15%;
  font-weight: bold;
  text-align: right;
  padding: 3px 15px 3px 0;
}
dd {
  margin: 0 0 0 14%;
  padding-top: 3px;
  padding-bottom: 3px;
}
&lt;/style&gt;
&lt;p&gt;こんにちは。ホクソエムのグローバル推進事業部にて本部長を努めます瓜生(&lt;i class=&#34;fa fa-twitter&#34;&gt;&lt;/i&gt;&lt;a href=&#34;https://twitter.com/u_ribo/&#34;&gt;@u_ribo&lt;/a&gt;)です。この記事ではRにおける環境変数の設定方法のおさらいと、ナウな手法を使った環境変数の管理方法について紹介します。&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;環境変数を利用していますか?&lt;/h2&gt;
&lt;p&gt;Rでは、利用している環境やユーザの設定を環境変数として記録・利用できるようになっています。具体的な項目については&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Environment-variable-index&#34;&gt;ドキュメント&lt;/a&gt;に記されている通りですが、例えばユーザのホームディレクトリ (&lt;code&gt;HOME&lt;/code&gt;)やロケール (&lt;code&gt;LC_ALL&lt;/code&gt;)などがあります。こうした環境変数は直接意識して利用することは稀ですが、頻繁に使う値やディレクトリのパスなどを環境変数として保存しておくと便利なことがあります。&lt;/p&gt;
&lt;p&gt;現在設定されている環境変数の値を確認するには&lt;code&gt;Sys.getenv()&lt;/code&gt;関数を実行します。引数に何も指定せずに実行すると全ての環境変数と値が出力されますが、引数に環境変数名を指定することで個別の値を参照することもできます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.getenv(&amp;quot;HOME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/uri&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;またRのセッション中で環境変数を設定したり変更が可能です。変更には&lt;code&gt;Sys.setenv()&lt;/code&gt;を使います。デフォルトでは存在しない&lt;code&gt;CODE_NAME&lt;/code&gt;という環境変数を作ってみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CODE_NAMEという環境変数は定義されていないので空白値が返ってくる
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数CODE_NAMEと値を与えます
Sys.setenv(&amp;quot;CODE_NAME&amp;quot; = &amp;quot;HOXO_URI&amp;quot;)
# 環境変数CODE_NAMEの値を参照します
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;HOXO_URI&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数を削除します (Rを再起動するとデフォルトで登録されていない環境変数は削除されます)
Sys.unsetenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この方法ではRの起動時に都度、環境変数を定義することになるので面倒です。そこでRでは&lt;code&gt;.Renviron&lt;/code&gt;や&lt;code&gt;.Rprofile&lt;/code&gt;という設定ファイルの中で環境変数を定義することができるようになっています (&lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34;&gt;参考&lt;/a&gt;)。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;config&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;configパッケージ&lt;/h2&gt;
&lt;p&gt;上記の設定ファイルは隠しファイルとなっており、管理が面倒なことがあります。また例えばテストや開発、一時的に使うといった&lt;strong&gt;用途に応じて異なる値の環境変数を用いたい&lt;/strong&gt;場合、これらのファイルを利用するのは優れた方法とはいえません。&lt;/p&gt;
&lt;p&gt;状況に応じて変数の値を切り替えたい… そういう時があると思いますっ!そこで今回紹介する&lt;strong&gt;config&lt;/strong&gt;パッケージの登場です！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/config&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/config&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;config&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;configの使い方&lt;/h3&gt;
&lt;p&gt;configパッケージは、YAMLファイルに変数として扱いたい項目と値を記述することでRからその値を参照可能にします。そのため、YAMLファイルを設定ファイルとして、項目と値を環境変数のように扱うことが可能になります。説明のため下記のようなconfig.ymlファイルを用意します。これは利用するユーザに応じてusernameとroleという変数の値を変更させるためのファイルとなります。&lt;/p&gt;
&lt;pre class=&#34;yml&#34;&gt;&lt;code&gt;default:
  username: &amp;quot;admin&amp;quot;
  role: &amp;quot;admin&amp;quot;

develop: 
  username: &amp;quot;dev&amp;quot;
  role: &amp;quot;admin&amp;quot;

guest:
  username: &amp;quot;guest&amp;quot;
  role: &amp;quot;user&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではconfigパッケージを使ってconfig.ymlの値を参照しましょう。configは現在GitHub上で開発が行われているので、githubinstallパッケージなどを使ってインストールする必要があります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;githubinstall&amp;quot;)
githubinstall::gh_install_packages(&amp;quot;config&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(config)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configの主要な関数は&lt;code&gt;get()&lt;/code&gt;です。この関数が設定ファイルを読み込みます。デフォルトでは作業ディレクトリにあるconfig.ymlファイルの中身を読みますが、読み込み関数の引数の変更によって設定ファイル名やパスを変更できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Rから扱いやすくするためオブジェクトとして保存する
conf &amp;lt;- config::get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;config::get()&lt;/code&gt;の値を一度オブジェクトとして保存しておくと、configの値が参照しやすくなります。あるいは&lt;code&gt;get()&lt;/code&gt;で直接変数名を指定するのも方法の一つです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$username&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$role&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(&amp;quot;role&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで&lt;code&gt;get()&lt;/code&gt;で指定可能な項目を確認してみましょう。&lt;code&gt;get()&lt;/code&gt;には次の引数が含まれます。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;value&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;設定ファイルconfig.ymlに記述された項目を指定することでその値を参照する。指定しない場合、config.yml中の全ての値を返す&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;config&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;環境変数&lt;code&gt;R_CONFIG_NAME&lt;/code&gt;で指定された設定項目。デフォルトで設定ファイルのdefaultに含まれる変数を扱うようになる&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;file&lt;/dt&gt;
&lt;dd&gt;設定ファイルを指定。デフォルトで作業ディレクトリに含まれるconfig.ymlを扱う。異なるパス、ファイル名の場合に指定する必要がある
&lt;/dd&gt;
&lt;dt&gt;use_parent&lt;/dt&gt;
&lt;dd&gt;上位のディレクトリに設定ファイルが含まれる場合、&lt;em&gt;FALSE&lt;/em&gt;を指定することで上位ディレクトリの設定ファイルを読み込まない
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt;のdefaultの値から、developの値に切り替える場合は次のコマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(config = &amp;quot;develop&amp;quot;)
## $username
## [1] &amp;quot;dev&amp;quot;
## 
## $role
## [1] &amp;quot;admin&amp;quot;
## 
## attr(,&amp;quot;config&amp;quot;)
## [1] &amp;quot;develop&amp;quot;
## attr(,&amp;quot;file&amp;quot;)
## [1] &amp;quot;config.yml&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私は、ギョームでよく使う環境変数（データベースのホストやAPIキーなど）は&lt;code&gt;config.yml&lt;/code&gt;に書いておいて、&lt;code&gt;config::get()&lt;/code&gt;でオブジェクトとして保存されたものを呼び出すという使い方をしています。ローカルとサーバ上のRStudio Serverで異なる値を利用する機会があるのでconfigが役立っています。なおGitリポジトリに登録する際は、cofigの内容が公開されても問題ないものか、今一度確認しましょう。プライベートリポジトリに保存しておくのも手段かもしれません。&lt;/p&gt;
&lt;p&gt;類似のパッケージ・プロジェクト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Miachol/configr&#34; class=&#34;uri&#34;&gt;https://github.com/Miachol/configr&lt;/a&gt; … こちらはCRANに登録されています。またYAMLだけでなくJSON形式での設定ファイルにも対応します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面倒な環境変数の管理にconfigパッケージ! 是非っ!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD

&lt;link href=&#34;#####../content/post/config_files/font-awesome-4.5.0/css/font-awesome.min.css&#34; rel=&#34;stylesheet&#34; /&gt;





/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>
