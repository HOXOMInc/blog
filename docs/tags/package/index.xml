<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package on 株式会社ホクソエムのブログ</title>
    <link>http://blog.hoxo-m.com/HOXOMinc-blog/tags/package/</link>
    <description>Recent content in Package on 株式会社ホクソエムのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>HOXOM, Inc.</copyright>
    <lastBuildDate>Thu, 20 Apr 2017 08:02:00 -0900</lastBuildDate>
    <atom:link href="/HOXOMinc-blog/tags/package/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ナウでヤングなRの環境変数管理方法</title>
      <link>http://blog.hoxo-m.com/HOXOMinc-blog/2017/04/20/config/</link>
      <pubDate>Thu, 20 Apr 2017 08:02:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/HOXOMinc-blog/2017/04/20/config/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;style type=&#34;text/css&#34;&gt;
dt {
  clear: left;
  float: left;
  width: 15%;
  font-weight: bold;
  text-align: right;
  padding: 3px 15px 3px 0;
}
dd {
  margin: 0 0 0 14%;
  padding-top: 3px;
  padding-bottom: 3px;
}
&lt;/style&gt;
&lt;p&gt;こんにちは。ホクソエムのグローバル推進事業部にて本部長を努めます瓜生(&lt;i class=&#34;fa fa-twitter&#34;&gt;&lt;/i&gt;&lt;a href=&#34;https://twitter.com/u_ribo/&#34;&gt;@u_ribo&lt;/a&gt;)です。この記事ではRにおける環境変数の設定方法のおさらいと、ナウな手法を使った環境変数の管理方法について紹介します。&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;環境変数を利用していますか?&lt;/h2&gt;
&lt;p&gt;Rでは、利用している環境やユーザの設定を環境変数として記録・利用できるようになっています。具体的な項目については&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-admin.html#Environment-variable-index&#34;&gt;ドキュメント&lt;/a&gt;に記されている通りですが、例えばユーザのホームディレクトリ (&lt;code&gt;HOME&lt;/code&gt;)やロケール (&lt;code&gt;LC_ALL&lt;/code&gt;)などがあります。こうした環境変数は直接意識して利用することは稀ですが、頻繁に使う値やディレクトリのパスなどを環境変数として保存しておくと便利なことがあります。&lt;/p&gt;
&lt;p&gt;現在設定されている環境変数の値を確認するには&lt;code&gt;Sys.getenv()&lt;/code&gt;関数を実行します。引数に何も指定せずに実行すると全ての環境変数と値が出力されますが、引数に環境変数名を指定することで個別の値を参照することもできます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.getenv(&amp;quot;HOME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/uri&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;またRのセッション中で環境変数を設定したり変更が可能です。変更には&lt;code&gt;Sys.setenv()&lt;/code&gt;を使います。デフォルトでは存在しない&lt;code&gt;CODE_NAME&lt;/code&gt;という環境変数を作ってみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CODE_NAMEという環境変数は定義されていないので空白値が返ってくる
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数CODE_NAMEと値を与えます
Sys.setenv(&amp;quot;CODE_NAME&amp;quot; = &amp;quot;HOXO_URI&amp;quot;)
# 環境変数CODE_NAMEの値を参照します
Sys.getenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;HOXO_URI&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 環境変数を削除します (Rを再起動するとデフォルトで登録されていない環境変数は削除されます)
Sys.unsetenv(&amp;quot;CODE_NAME&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この方法ではRの起動時に都度、環境変数を定義することになるので面倒です。そこでRでは&lt;code&gt;.Renviron&lt;/code&gt;や&lt;code&gt;.Rprofile&lt;/code&gt;という設定ファイルの中で環境変数を定義することができるようになっています (&lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html&#34;&gt;参考&lt;/a&gt;)。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;config&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;configパッケージ&lt;/h2&gt;
&lt;p&gt;上記の設定ファイルは隠しファイルとなっており、管理が面倒なことがあります。また例えばテストや開発、一時的に使うといった&lt;strong&gt;用途に応じて異なる値の環境変数を用いたい&lt;/strong&gt;場合、これらのファイルを利用するのは優れた方法とはいえません。&lt;/p&gt;
&lt;p&gt;状況に応じて変数の値を切り替えたい… そういう時があると思いますっ!そこで今回紹介する&lt;strong&gt;config&lt;/strong&gt;パッケージの登場です！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/config&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/config&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;config&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;configの使い方&lt;/h3&gt;
&lt;p&gt;configパッケージは、YAMLファイルに変数として扱いたい項目と値を記述することでRからその値を参照可能にします。そのため、YAMLファイルを設定ファイルとして、項目と値を環境変数のように扱うことが可能になります。説明のため下記のようなconfig.ymlファイルを用意します。これは利用するユーザに応じてusernameとroleという変数の値を変更させるためのファイルとなります。&lt;/p&gt;
&lt;pre class=&#34;yml&#34;&gt;&lt;code&gt;default:
  username: &amp;quot;admin&amp;quot;
  role: &amp;quot;admin&amp;quot;

develop: 
  username: &amp;quot;dev&amp;quot;
  role: &amp;quot;admin&amp;quot;

guest:
  username: &amp;quot;guest&amp;quot;
  role: &amp;quot;user&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ではconfigパッケージを使ってconfig.ymlの値を参照しましょう。configは現在GitHub上で開発が行われているので、githubinstallパッケージなどを使ってインストールする必要があります。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;githubinstall&amp;quot;)
githubinstall::gh_install_packages(&amp;quot;config&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(config)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configの主要な関数は&lt;code&gt;get()&lt;/code&gt;です。この関数が設定ファイルを読み込みます。デフォルトでは作業ディレクトリにあるconfig.ymlファイルの中身を読みますが、読み込み関数の引数の変更によって設定ファイル名やパスを変更できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Rから扱いやすくするためオブジェクトとして保存する
conf &amp;lt;- config::get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;config::get()&lt;/code&gt;の値を一度オブジェクトとして保存しておくと、configの値が参照しやすくなります。あるいは&lt;code&gt;get()&lt;/code&gt;で直接変数名を指定するのも方法の一つです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$username&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;conf$role&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;admin&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(&amp;quot;role&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここで&lt;code&gt;get()&lt;/code&gt;で指定可能な項目を確認してみましょう。&lt;code&gt;get()&lt;/code&gt;には次の引数が含まれます。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;value&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;設定ファイルconfig.ymlに記述された項目を指定することでその値を参照する。指定しない場合、config.yml中の全ての値を返す&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;config&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;環境変数&lt;code&gt;R_CONFIG_NAME&lt;/code&gt;で指定された設定項目。デフォルトで設定ファイルのdefaultに含まれる変数を扱うようになる&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;file&lt;/dt&gt;
&lt;dd&gt;設定ファイルを指定。デフォルトで作業ディレクトリに含まれるconfig.ymlを扱う。異なるパス、ファイル名の場合に指定する必要がある
&lt;/dd&gt;
&lt;dt&gt;use_parent&lt;/dt&gt;
&lt;dd&gt;上位のディレクトリに設定ファイルが含まれる場合、&lt;em&gt;FALSE&lt;/em&gt;を指定することで上位ディレクトリの設定ファイルを読み込まない
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt;のdefaultの値から、developの値に切り替える場合は次のコマンドを実行します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config::get(config = &amp;quot;develop&amp;quot;)
## $username
## [1] &amp;quot;dev&amp;quot;
## 
## $role
## [1] &amp;quot;admin&amp;quot;
## 
## attr(,&amp;quot;config&amp;quot;)
## [1] &amp;quot;develop&amp;quot;
## attr(,&amp;quot;file&amp;quot;)
## [1] &amp;quot;config.yml&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私は、ギョームでよく使う環境変数（データベースのホストやAPIキーなど）は&lt;code&gt;config.yml&lt;/code&gt;に書いておいて、&lt;code&gt;config::get()&lt;/code&gt;でオブジェクトとして保存されたものを呼び出すという使い方をしています。ローカルとサーバ上のRStudio Serverで異なる値を利用する機会があるのでconfigが役立っています。なおGitリポジトリに登録する際は、cofigの内容が公開されても問題ないものか、今一度確認しましょう。プライベートリポジトリに保存しておくのも手段かもしれません。&lt;/p&gt;
&lt;p&gt;類似のパッケージ・プロジェクト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Miachol/configr&#34; class=&#34;uri&#34;&gt;https://github.com/Miachol/configr&lt;/a&gt; … こちらはCRANに登録されています。またYAMLだけでなくJSON形式での設定ファイルにも対応します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面倒な環境変数の管理にconfigパッケージ! 是非っ!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD

&lt;link href=&#34;#####../content/post/config_files/font-awesome-4.5.0/css/font-awesome.min.css&#34; rel=&#34;stylesheet&#34; /&gt;





/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>DJタカヤナギ=サンで学ぶRを用いた画像操作</title>
      <link>http://blog.hoxo-m.com/HOXOMinc-blog/2017/04/10/imager/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 -0900</pubDate>
      
      <guid>http://blog.hoxo-m.com/HOXOMinc-blog/2017/04/10/imager/</guid>
      <description>&lt;div id=&#34;djr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;DJタカヤナギ=サンで学ぶRを用いた画像操作&lt;/h2&gt;
&lt;p&gt;こんにちは、ホクソエムの市川です。&lt;/p&gt;
&lt;p&gt;日々の業務の合間にちょっとクソコラを作りたいこと、あると思います。&lt;/p&gt;
&lt;p&gt;でもクソコラに手間はかけたくない。&lt;/p&gt;
&lt;p&gt;そんな時に使えるのが&lt;code&gt;imager&lt;/code&gt;パッケージです。&lt;/p&gt;
&lt;p&gt;ちなみに画像操作に使えるRのパッケージには他にも&lt;code&gt;EBImage&lt;/code&gt;パッケージ、&lt;code&gt;magick&lt;/code&gt;パッケージ等があります。&lt;/p&gt;
&lt;p&gt;それぞれに利点はあるのですが、&lt;code&gt;EBImage&lt;/code&gt;はbioconductorからインストールする必要があるので手間がかかり、&lt;code&gt;magick&lt;/code&gt;は画像の上に図形を描くのが意外と面倒だったりします。 繰り返しますがクソコラに手間はかけたくない。&lt;/p&gt;
&lt;p&gt;ということで今回はCC0ライセンスで公開されているDJタカヤナギ=サンの画像を用いて&lt;code&gt;imager&lt;/code&gt;パッケージの使い方について学びたいと思います。&lt;/p&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;imager&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像の読み込みと表示&lt;/h3&gt;
&lt;p&gt;画像の読み込みにはload.image()を用います。&lt;/p&gt;
&lt;p&gt;読み込んだ画像の情報はprint.cimg()を用います。画像のサイズは幅960px、高さ720pxとなっています。&lt;/p&gt;
&lt;p&gt;表示にはplot.cimg()を用います（ちなみにprint()およびplot()だけで、自動的にprint.cimg()、plot.cimg()が呼び出されます。なぜだかわかりますか？わかりますね？）&lt;/p&gt;
&lt;p&gt;ここではXY軸を表示したくないので&lt;code&gt;axes&lt;/code&gt;引数をFALSEに指定しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;imager&amp;quot;)
u &amp;lt;- &amp;quot;https://raw.githubusercontent.com/dichika/ojisan/master/takayanagi_dj.jpg&amp;quot; #DJタカヤナギ
dj &amp;lt;- load.image(u)
print(dj)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Image. Width: 960 pix Height: 720 pix Depth: 1 Colour channels: 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dj, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像上に図形を表示する&lt;/h3&gt;
&lt;p&gt;画像上に図形を表示する際はpx.hogehoge()とhightlight()を組み合わせます。 px.hogehoge()で図形のサイズ、座標を指定して、highlight()で表示です。 &lt;code&gt;r&lt;/code&gt;で半径を指定し、&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;y&lt;/code&gt;で表示する座標を指定します。 &lt;strong&gt;なお、図形は&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;y&lt;/code&gt;の中点に表示されるので注意してください。&lt;/strong&gt; その他の図形については?common_pixsetsを参照してください。&lt;/p&gt;
&lt;p&gt;ここで画像の幅と高さを取得するためにwidth()とheight()を用いています。 その他の画像情報取得関数については?cimg.dimensionsを参照してください。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dj, axes = TRUE)
highlight(px.circle(r = 40, x = 300, y = 720), col = &amp;quot;orange&amp;quot;)
highlight(px.diamond(r = 40, x = 600, y = 350), col = &amp;quot;green&amp;quot;)
highlight(px.square(r = 40, x = width(dj)*2, y = height(dj)), col = &amp;quot;black&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像上にテキストを表示する&lt;/h3&gt;
&lt;p&gt;テキストを表示するにはRの組込み関数のtext()を用います。 デフォルトでは指定したxy座標を中心にテキストが表示されます。 なお、implot()を用いて表示する方法がチュートリアルには紹介されているのですが、マルチバイト文字の表示に失敗します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(family=&amp;quot;Hiragino Kaku Gothic Pro W6&amp;quot;)
plot(dj, axes = FALSE)
text(x = width(dj)/2, y = height(dj)-100, labels = &amp;quot;キュッキュキュッキュ&amp;quot;, col = &amp;quot;orange&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像を切り取る&lt;/h3&gt;
&lt;p&gt;画像の一部を切り取るにはimsub()を用います。 画像の範囲指定には条件式が利用できます。 &lt;code&gt;%inr%&lt;/code&gt;演算子を用いると矩形で範囲指定できます。&lt;/p&gt;
&lt;p&gt;なお、ここで&lt;code&gt;%&amp;gt;%&lt;/code&gt;演算子を用いていますがこれはパイプ演算子と呼ばれるものであり、演算子左側の操作を右側の操作に受け渡すものです。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% imsub(x &amp;gt; width(dj)/2) %&amp;gt;% plot(axes = TRUE) # 画像右半分を切り取る&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% imsub(x %inr% c(411,722), y %inr% c(67,349)) %&amp;gt;% plot(axes = TRUE) # 矩形による範囲指定&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この操作はインタラクティブに行うことも可能です。 この際はgrabRect()を用います。 表示された画像に対して、矩形で範囲指定すると、画像左上端と右下端の点の座標が返されます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grabRect(dj) # インタラクティブな範囲指定
# 以下のような結果が返される。
# x0  y0  x1  y1 
# 411  67 722 349 &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;画像をぼかす&lt;/h3&gt;
&lt;p&gt;ちょっとおじさんの画像ばかり見ていると目が辛くなってきましたね。 画像をぼかしてみましょう。 画像をぼかすにはisoblur()を用います。 &lt;code&gt;sigma&lt;/code&gt;の値を大きくすればするほど画像はぼかされていきます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj %&amp;gt;% isoblur(sigma = 15) %&amp;gt;% plot(axes =FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;クソコラ実践&lt;/h3&gt;
&lt;p&gt;さて、ここまでの操作を用いてクソコラを作ってみましょう。 クソコラを作る前にここで別のおじさんを投入します。 こちらもCC0で公開されている画像です。桜が満開ですね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan &amp;lt;- load.image(&amp;quot;https://raw.githubusercontent.com/dichika/ojisan/master/sakura4.jpg&amp;quot;) # 別のおじさん
plot(ojisan, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この画像とDJタカヤナギ=サンの画像を用いて、クソコラを作ります。 まずresize()を用いて、2つの画像のサイズを揃えます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dj_mod &amp;lt;- dj %&amp;gt;% resize(size_x = 500, size_y = 500)
ojisan_mod &amp;lt;- ojisan %&amp;gt;% resize(size_x = 500, size_y = 500)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次におじさんの画像から顔画像を抽出します。 この際MS FACE APIを利用します。 本APIの利用方法については以下の記事等をご参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Almond/items/9b1df61ec521c9e3a9b0&#34; class=&#34;uri&#34;&gt;http://qiita.com/Almond/items/9b1df61ec521c9e3a9b0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/dichika/20170408/p1&#34; class=&#34;uri&#34;&gt;http://d.hatena.ne.jp/dichika/20170408/p1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MS_FACE_KEY &amp;lt;- &amp;quot;取得したスクリプトキー&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお、APIを利用する際にいったんsave.image()を用いて、画像を一時ファイルに保存しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- tempfile(fileext = &amp;quot;.png&amp;quot;)
ojisan_mod %&amp;gt;% save.image(tmp)

library(&amp;quot;httr&amp;quot;)
url_base &amp;lt;- &amp;quot;https://westus.api.cognitive.microsoft.com/face/v1.0/detect&amp;quot;
result &amp;lt;- POST(url_base, 
               body = upload_file(tmp), 
               query = list(returnFaceAttributes=&amp;quot;age,gender,headPose,smile,facialHair,glasses,emotion&amp;quot;, 
                            language=&amp;quot;en&amp;quot;), 
               add_headers(.headers = c(`Content-Type`=&amp;quot;application/octet-stream&amp;quot;, 
                                        `Ocp-Apim-Subscription-Key`=MS_FACE_KEY
               )
               )
) %&amp;gt;% content()
bbox &amp;lt;- result[[1]]$faceRectangle
ojisan_sub &amp;lt;- ojisan_mod %&amp;gt;% imsub(x %inr% c(bbox$left, bbox$left + bbox$width),
                                   y %inr% c(bbox$top, bbox$top + bbox$height))
plot(ojisan_sub, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;抽出した顔画像をDJタカヤナギ=サンの画像に重ねてみましょう。 isoblur()でぼかした後、imdraw()で画像を重ねています。 これはこれで味わい深いですが、ちょっと顔画像が大きいですね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan_blur &amp;lt;- ojisan_sub %&amp;gt;% isoblur(sigma = 5)
ojisan_pos_x &amp;lt;- 100
ojisan_pos_y &amp;lt;- 200
dj_ojisan &amp;lt;- dj %&amp;gt;% imdraw(ojisan_blur, x = ojisan_pos_x, y = ojisan_pos_y, opacity = 0.9)
plot(dj_ojisan, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;imresize()でscaleを50%に指定して縮小して重ねることにします。 だいぶ自然なクソコラになってきましたね。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ojisan_blur_half &amp;lt;- ojisan_sub %&amp;gt;% isoblur(sigma = 5) %&amp;gt;% imresize(scale = 0.5)
dj_ojisan2 &amp;lt;- dj %&amp;gt;% imdraw(ojisan_blur_half, x = ojisan_pos_x, y = ojisan_pos_y, opacity = 0.9)
plot(dj_ojisan2, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;それでは最後の仕上げです。 わかりやすいように赤い円で強調し文字を加えます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(family=&amp;quot;Hiragino Kaku Gothic Pro W6&amp;quot;)
plot(dj_ojisan2, axes = FALSE)
highlight(px.circle(r = bbox$width*0.5*1.1, x = ojisan_pos_x*2.6, y = ojisan_pos_y*2.5), col = &amp;quot;red&amp;quot;)
text(x = width(dj)/2, y = height(dj)-100, labels = &amp;quot;おわかりいただけただろうか&amp;quot;, col = &amp;quot;white&amp;quot;, cex = 1.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/HOXOMinc-blog/post/imager_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;いかがでしたか？ Rだけで自然な心霊写真が作れましたね。&lt;/p&gt;
&lt;p&gt;今回使った&lt;code&gt;imager&lt;/code&gt;パッケージの機能はどれも基本的なものです。 公式サイトには充実した機能紹介があります。ぜひ参考にして皆さんもクソコラ製作を効率化してみてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dahtah.github.io/imager/&#34; class=&#34;uri&#34;&gt;http://dahtah.github.io/imager/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!!!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>